print("Please enter a cube of 3 by 3 by 6")
}
if(!array[1] == 'red' | !array[2] == 'blue' | !array[3] == 'green' |
!array[4] == 'yellow' |     !array[5] == 'white' | !array[6] == 'orange'){
print("Please enter a valid 6 colors for the cube")
}
#need more code here to check if the cube is solved
print array
}
cube = function(color, cube){
#Description:
#Args:
#Returns:
array = array(color,cube)
if(!dim(array)[1] == 3 | !dim(array)[2] == 3 | !dim(array)[3] == 6){
print("Please enter a cube of 3 by 3 by 6")
}
if(!array[1] == 'red' | !array[2] == 'blue' | !array[3] == 'green' |
!array[4] == 'yellow' |     !array[5] == 'white' | !array[6] == 'orange'){
print("Please enter a valid 6 colors for the cube")
}
#need more code here to check if the cube is solved
print(array)
}
cube(c('red','blue','green','yellow','white','orange'), c(3,3,6))
library(ggplot2)
set.seed(1)
m <- data.frame(x=rnorm(100),y=rnorm(100))
ggplot(m, aes(x,y))+stat_density2d(aes(fill=..level.., alpha=0.1),geom ="polygon")+
scale_fill_continuous(high='red',low='green')
ggplot(m, aes(x,y))+stat_density2d(aes(fill=..level.., alpha=0.1),geom ="polygon")+
scale_fill_continuous(high='red',low='green') + theme_classic()
ggplot(m, aes(x,y))+stat_density2d(aes(fill=..level..),geom ="polygon")+
scale_fill_continuous(high='red',low='green') + theme_classic()
q()
system("sudo ./mountBackup.sh")
system("sudo ./mountResearch.sh")
df<-data.frame(A=c(rep(1:4,4)),B=runif(16,min=0,max=1),c=rnorm(16, mean=1,sd=0.5))
df
library(tidyverse)
?summarize_each
?mutate_at
?cumsum
rm(df)
clear
system("sudo ./mountBackup.sh")
system("sudo ./mountBackup.sh")
getwd()
system("cd backup/backup/RWorkspace")
getwd()
load("~/backup/backup/RWorkspace/QuranCorpus/QuranCorpus.Rproj")
load("/home/imran/backup/backup/RWorkspace/QuranCorpus/QuranCorpus.Rproj")
system("sudo ./mountBackup.sh")
?load
load("~/backup/backup/RWorkspace/QuranCorpus/QuranCorpus.Rproj")
system("sudo ./mountBackup.sh")
system("sudo ./mountBackup.sh")
load(file="backup/backup/RWorkspace/QuranCorpus/QuranCorpus.Rproj")
r --version
sessionInfo()
?load
devtools::install_github("rstudio/keras")
install.packages("keras")
library(keras)
install_tensorflow()
mnist <- dataset_m()
mnist <- dataset_mnist()
mnist <- dataset_imdb()
keras::install_keras()
keras::install_keras()
mnist <- dataset_mnist()
library(keras)
dataset_imdb()
imdb <- dataset_imdb()
summary(imdb)
library(ggplot2)
head(iris)
myplot <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_line()
myplot
mtcars
myplot <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_line(color=Specie)
myplot <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_line(aes(color=Species))
myplot
AirPassengers
str(AirPassengers)
myplot <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_line() + facet_wrap(~ Species)
myplot
myplot <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_line() + facet_wrap(Species ~)
myplot <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_line() + facet_wrap(Species ~.)
myplot
myplot <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_line() + facet_wrap(Species ~ .)
myplot
myplot <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_line() + facet_grid()
myplot <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + geom_line() + facet_grid(Species ~.)
myplot
str(faithful)
str(PlantGrowth)
str(presidents)
install.packages("mann-kendall")
install.packages("Kendall")
library(Kendall)
vignette("Kendall")
?cor
1:10
load("~/backup/backup/RWorkspace/QuranCorpus/.RData")
library(dplyr)
library(tidytext)
library(wordcloud)
head(word_count)
head(tidy_text)
rm(Features)
head(morphology)
rm(morphead)
rm(morphology)
morphology <- read.csv(file = "./corpus/quranic-corpus-morphology-0.4.txt",
sep = "\t", header = TRUE, skip = 56,
stringsAsFactors = FALSE, quote="")
getwd()
rstudioapi::openProject(path = "backup/backup/RWorkspace/QuranCorpus/QuranCorpus.Rproj")
q()
library(ggplot2)
q()
rstudioapi::openProject("~/backup/backup/Rand")
rstudioapi::openProject("~/backup/backup/RWorkspace/RandomForest/RandomForest.Rproj")
install.packages("prettydoc")
library(arules)
install.packages("arules")
Names <- c("Name1","Name2")
X2 <- c("10","1")
X1 <- c("7","5")
db <- data.frame(Names, X2, X1)
db
?reshape
?order
colnames(db)
sort(colnames(db))
db2 <- db[c(sort(colnames(db))))]
db2 <- db[sort(colnames(db)))]
db2 <- db[sort(colnames(db))]
db2
db <- data.frame(Names, X2, X1, X10, X11)
X10 <- c("8","5")
X11 <- c("6","5")
db <- data.frame(Names, X2, X1, X10, X11)
db2 <- db[sort(colnames(db))]
db2
sort(colnames(db))
order(colnames(db))
sort(as.numeric(colnames(db)))
sort(colnames(as.numeric(db)))
library(gtools)
?mixedorder
db2 <- db[mixedorder(colnames(db))]
db2
order(colnames(db), method = "radix")
db[order(colnames(db), method = "radix")]
order(colnames(db))
colnames(db)
order(as.numeric(gsub(".*", "", colnames(db))))
db[order(as.numeric(gsub(".*", "", colnames(db))))]
db[order(as.numeric(gsub("X\b", "", colnames(db))))]
db[order(as.numeric(gsub("X\\b", "", colnames(db))))]
columns <- colnames(db)
?gsub
strsplit(columns)
strsplit(columns, split=" ")
gsub("[:alpha:]", "", columns)
gsub("[:alpha:]*", "", columns)
gsub("[:alpha:]\\*", "", columns)
gsub("[:alpha:]\*", "", columns)
gsub("^\d", "", columns)
gsub("^\\d", "", columns)
gsub("!\\d", "", columns)
gsub("~\\d", "", columns)
gsub("~(\\d)", "", columns)
gsub("[^(\\d)]", "", columns)
gsub("[^[(\\d)]]", "", columns)
gsub("[^(\\d)", "", columns)
gsub("^(\\d)", "", columns)
?gsub
gsub("\\d", "", "x10")
gsub("\\w", "", "x10")
gsub("\\W", "", "x10")
gsub("\\d", "", "x10")
gsub("^(\\d)", "", "x10")
gsub("(\\d)", "", "x10")
gsub("(\\d)", "", "X10")
gsub("(\\w)", "", "X10")
gsub("(\\[:alpha:])", "", "X10")
gsub("([:alpha:])", "", "X10")
gsub("[:alpha:]", "", "X10")
gsub("X", "", "X10")
gsub("X", "", colnames(db))
colnames(db)[-1]
gsub("X", "", colnames(db)[-1])
sort(as.numeric(gsub("X", "", colnames(db)[-1])))
db[sort(as.numeric(gsub("X", "", colnames(db)[-1])))]
db[c(sort(as.numeric(gsub("X", "", colnames(db)[-1]))))]
sorted <- sort(as.numeric(gsub("X", "", colnames(db)[-1])))
sorted
db[c(sorted)]
db[order(as.numeric(substring(colnames(db)[-1], 2)), na.last = FALSE)]
db[order(as.numeric(substring(colnames(db), 2)), na.last = FALSE)]
?order
rank(colnames(db))
db[rank(colnames(db))]
grep("!\\d", "", "X10")
grep("!(\\d)", "", "X10")
grep("^(\\d)", "", "X10")
grep("^[\\d]", "", "X10")
grep("^([\\d])", "", "X10")
grep("\\d", "", "X10")
gsub
gsub("\\d", "", "X10")
rnorm
?rnorm
?distributions
?dnorm
?paste
list.files()
attach(datasets)
attach(dataset)
library(datasets)
Titanic
summary(Titanic)
str(Titanic)
install.packages("PASWR")
library(PASWR)
titanic3
titanic3$boat
titanic3[boat=='']
titanic3[titanic$boat=='']
titanic3[titanic3$boat=='']
titanic3[titanic3$boat==""]
which(is.na(titanic3$boat))
str(titanic3)
any(is.na(titanic3$boat))
titanic3[,titanic3$boat==""]
titanic3[titanic3$boat>2]
titanic3[titanic3$boat>2,]
titanic3[is.na(titanic3$boat),]
titanic3[titanic3$boat > 100,]
View(titanic3)
is.null(titanic3$boat)
any(is.null(titanic3$boat))
which(is.null(titanic3$boat))
which(nchar(titanic3$boat)==0)
str(titanic3)
which(as.character(titanic3$boat)=="")
titanic3[as.character(titanic3$boat)==""]
titanic3[as.character(titanic3$boat)=="",]
titanic3[titanic3$embarked==""]
titanic3[titanic3$embarked=="",]
typeof(titanic3$boat)
library(tidyverse)
df <- fread("titanic3.csv")
a<-data.frame(ID=c(1,2,2,2,3,3),Date=as.Date(c("2017-01-01","2017-01-02","2017-01-03","2017-01-04","2017-01-05","2017-01-06")))
print(a)
which.max(a$Date)
library(dplyr)
View(a)
a %>% group_by(ID) %>% which.max(Date)
grouped <- a %>% group_by(ID)
filter(grouped, which.max(Date))
grouped
grouped %>% top_n(1,Date)
a
library(dplyr)
?lag
a
lead(1:10, 1)
lag(1:10, 1)
a$PreviousDate <- lag(a$Date, 1)
a
?diff
diff(1:10,1)
diff(1:10,2)
base::diff((1:10,1))
base::diff(1:10,1)
base::diff(1:10,1,1)
diff(1:10,2,2)
diff(1:10, -1)
a
diff(a$Date,1)
diff(a$Date,lag=1)
cumsum(1:10)
cumsum(cumsum(1:10))
a
lead(a$Date,1)
a$NextDate <- lead(a$Date,1)
a
a$NextDate - a$Date
q()
library(MASS)
painters
summary(painters)
?aggregate
datamy <- read.table(text="state                  county    age    population
AL                 Autauga      1       2366
AL                 Autauga      2       3029
AL                 Autauga      3       3619
AL                 Autauga      4       3043
AL                 Autauga      5       3776", header=TRUE)
datamy
aggregate(datamy, by=county, weighted.mean(age, population))
aggregate(datamy, by=county, weighted.mean(datamy$age, datamy$population))
aggregate(datamy, by=county, weighted.mean(age, population))
str(datamy)
aggregate(datamy, by=c("state", county"), weighted.mean(age, population))
""
aggregate(datamy, by=c("state", "county"), weighted.mean(age, population))
aggregate(datamy, by=c("state", "county"), weighted.mean)
aggregate(datamy, by=list("state", "county"), weighted.mean)
by(df, list(df$state, df$country), function(i) weighted.mean(i$Age, i$population))
df <- datamy
by(df, list(df$state, df$country), function(i) weighted.mean(i$Age, i$population))
data %>% group_by(state, county) %>% summarize(weighted.mean(age, population))
library(dplyr)
data %>% group_by(state, county) %>% summarize(weighted.mean(age, population))
df %>% group_by(state, county) %>% summarize(weighted.mean(age, population))
View(datamy)
df %>% group_by(state, county) %>% summarize(weighted.mean(population))
df %>% group_by(state, county) %>% summarize(weighted.mean(age))
df %>% group_by(state, county) %>% summarize_all(weighted.mean(age, population))
?weighted.mean
weighted.mean(df$age, df$population)
?group_by
?aggregate
aggregate(df, list(df$state, df$county), weighted.mean(df$age, df$county))
aggregate(df, by=list(df$state, df$county), FUN=weighted.mean(df$age, df$county))
aggregate(df, by=list(df$state, df$county), FUN="weighted.mean")
aggregate(df, by=list(df$state, df$county), FUN=weighted.mean)
aggregate(df, by=list(df$county), FUN=weighted.mean)
str(df)
aggregate(df, by=list(as.character(df$county)), FUN=weighted.mean)
str(state.x77)
summarise_all(df, weighted.mean(age, population))
summarise_all
?summarise_all
summarise_all(df, weighted.mean)
df %>% group_by(state, county) %>% summarise_all(weighted.mean)
mean(df$age)
by(df, list(df$state, df$county), function(i) weighted.mean(i$age, i$population))
aggregate(.~state+country,df,weighted.mean)
aggregate(.~state+county,df,weighted.mean)
by(df, list(df$state, df$county), function(i) weighted.mean(i$age, i$population))
df %>% group_by(state, county) %>% summarize(weighted.mean(age, population))
q()
shiny::runApp('Invoice')
library(shiny)
library(shinydashboard)
shiny::runApp('Invoice')
mtcars
summary(mtcars)
irsi
iris
summary(iris)
q()
Ctrl + L
myvector = c(2,4,6,8)
lenght(myvector)
length(myvector)
sum(myvector)
anothervector(1,3,5,6,7)
anothervector= c(1,3,5,6,7)
myvector + anothervector
mean(myvector)
?mean
c1 <- c("Systems that think like humans")
col1 <- c("Systems that think like humans", "Definitions 1 and 2", "Systems that act like humans", "Definitions 3 and 4")
col2 <- c("Systems that think rationally", "Definitions 5 and 6", "Systems that act rationally", "Definition 7 and 8")
txttable <- data.frame(col1, col2)
kable(txttable, "html")
library(knitr)
col1 <- c("Systems that think like humans", "Definitions 1 and 2", "Systems that act like humans", "Definitions 3 and 4")
col2 <- c("Systems that think rationally", "Definitions 5 and 6", "Systems that act rationally", "Definition 7 and 8")
txttable <- data.frame(col1, col2)
x = kable(txttable, "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
gsub("<thead>.*</thead>", "", x)
library(knitr)
library(dplyr)
col1 <- c("Systems that think like humans", "Definitions 1 and 2", "Systems that act like humans", "Definitions 3 and 4")
col2 <- c("Systems that think rationally", "Definitions 5 and 6", "Systems that act rationally", "Definition 7 and 8")
txttable <- data.frame(col1, col2)
x = kable(txttable, "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
gsub("<thead>.*</thead>", "", x)
x = kable(txttable, "html") %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
?kable_styling
??kable_styling
install.packages(kableExtra)
install.packages("kableExtra")
x = kable(txttable, "html") %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
library(kableExtra)
x = kable(txttable, "html") %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"))
gsub("<thead>.*</thead>", "", x)
x = kable(txttable, "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
row_spec(1:3, bold=T)
gsub("<thead>.*</thead>", "", x)
x = kable(txttable, "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
row_spec(1,3, bold=T)
x = kable(txttable, "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
row_spec(1,3, bold=T)
gsub("<thead>.*</thead>", "", x)
x = kable(txttable, "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
row_spec(1, bold=T) %>% row_spec(3, bold = T)
gsub("<thead>.*</thead>", "", x)
x = kable(txttable, "html") %>%
kable_styling(bootstrap_options = c("striped")) %>%
row_spec(1, bold=T) %>% row_spec(3, bold = T)
gsub("<thead>.*</thead>", "", x)
x = kable(txttable, "html") %>%
kable_styling(bootstrap_options = c("striped")) %>%
column_spec(1, border_right = T)
row_spec(1, bold=T) %>% row_spec(3, bold = T)
gsub("<thead>.*</thead>", "", x)
x = kable(txttable, "html") %>%
kable_styling(bootstrap_options = c("striped")) %>%
column_spec(1, border_right = T)
row_spec(1, bold=T) %>% row_spec(3, bold = T, border_top = T)
x = kable(txttable, "html") %>%
kable_styling(bootstrap_options = c("striped")) %>%
column_spec(1, border_right = T)
row_spec(1, bold=T) %>% row_spec(3, bold = T)
gsub("<thead>.*</thead>", "", x)
x = kable(txttable, "html") %>%
kable_styling(bootstrap_options = c("striped")) %>%
column_spec(1, border_right = T)
row_spec(1, bold=T) %>% row_spec(3, bold = T)
gsub("<thead>.*</thead>", "", x)
x = kable(txttable, "html") %>%
kable_styling(bootstrap_options = c("striped")) %>%
column_spec(1, border_right = T) %>%
row_spec(1, bold=T) %>% row_spec(3, bold = T)
gsub("<thead>.*</thead>", "", x)
x = kable(txttable, "html") %>%
column_spec(1, border_right = T) %>%
row_spec(1, bold=T) %>% row_spec(3, bold = T)
gsub("<thead>.*</thead>", "", x)
x = kable(txttable, "html") %>%
kable_styling(bootstrap_options = c("striped")) %>%
column_spec(1, border_right = T) %>%
row_spec(1, bold=T) %>% row_spec(3, bold = T)
gsub("<thead>.*</thead>", "", x)
x = kable(txttable, "html") %>%
kable_styling(bootstrap_options = c("striped")) %>%
column_spec(1, border_right = T) %>%
row_spec(1, bold=T) %>% row_spec(3, bold = T, border_top = T)
gsub("<thead>.*</thead>", "", x)
x = kable(txttable, "html") %>%
kable_styling(bootstrap_options = c("striped")) %>%
column_spec(1, border_right = T) %>%
row_spec(1, bold=T) %>% row_spec(3, bold = T, border = T)
gsub("<thead>.*</thead>", "", x)
?kntir::include_graphics
??include_graphics
q()
library(arules)
?arules::apriori
str(iris)
class(iris)
head(iris)
head(iris, 10)
tail(iris)
tail(iris, 10)
iris$Petal.Length
iris$Sepal.Width
iris[1,]
iris[14,]
iris
iris[1,2]
head(iris)
iris[6,2]
iris[,2]
iris[1:2, 2:3]
head(iris)
which.max(iris$Sepal.Length)
summary(iris)
which.min(iris$Sepal.Width)
iris[iris$Sepal.Length==7.9, ]
iris[iris$Sepal.Length>5.0, ]
iris[iris$Sepal.Length>5.0, 3]
head(iris)
iris[iris$Sepal.Length>5.0, 1]
boxplot(iris$Sepal.Length)
summary(iris$Sepal.Length)
plot(iris)
head(iris)
levels(iris$Species)
list.files
list.files()
?read.transactions
??read.transactions
library(arules)
transactions = read.transactions(file = file("transaction.txt"),
format = "basket", sep = ",")
setwd("Desktop/Data Mining & DataWare Housing/data")
transactions = read.transactions(file = file("transaction.txt"),
format = "basket", sep = ",")
freqItemsets <- apriori(transactions,
parameter = list(minlen=1, sup=0.22, target="frequent itemsets"))
inspect(freqItemsets)
source('~/Desktop/Data Mining & DataWare Housing/data/frequentItemset.R')
source('~/Desktop/Data Mining & DataWare Housing/data/frequentItemset.R')
source('~/Desktop/Data Mining & DataWare Housing/data/frequentItemset.R')
??apriori
source('~/Desktop/Data Mining & DataWare Housing/data/frequentItemset.R')
